/*
Deployment script for EFEnterprise

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "EFEnterprise"
:setvar DefaultFilePrefix "EFEnterprise"
:setvar DefaultDataPath "C:\Users\srkuhl\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\v11.0\"
:setvar DefaultLogPath "C:\Users\srkuhl\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\v11.0\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
PRINT N'Creating [dbo].[Audit]...';


GO
CREATE TABLE [dbo].[Audit] (
    [AuditId]   INT           IDENTITY (1, 1) NOT NULL,
    [TableId]   INT           NOT NULL,
    [User]      NVARCHAR (50) NOT NULL,
    [TableName] VARCHAR (50)  NOT NULL,
    [Action]    VARCHAR (20)  NOT NULL,
    [CreatedOn] DATETIME      NOT NULL,
    [Before]    XML           NULL,
    [After]     XML           NOT NULL,
    PRIMARY KEY CLUSTERED ([AuditId] ASC)
);


GO
PRINT N'Creating [dbo].[Course]...';


GO
CREATE TABLE [dbo].[Course] (
    [CourseID]     INT           NOT NULL,
    [Title]        NVARCHAR (50) NULL,
    [Credits]      INT           NOT NULL,
    [DepartmentID] INT           NOT NULL,
    [CreatedBy]    NVARCHAR (50) NOT NULL,
    [CreatedOn]    DATETIME      NOT NULL,
    [UpdatedBy]    NVARCHAR (50) NULL,
    [UpdatedOn]    DATETIME      NULL,
    CONSTRAINT [PK_dbo.Course] PRIMARY KEY CLUSTERED ([CourseID] ASC)
);


GO
PRINT N'Creating [dbo].[Course].[IX_DepartmentID]...';


GO
CREATE NONCLUSTERED INDEX [IX_DepartmentID]
    ON [dbo].[Course]([DepartmentID] ASC);


GO
PRINT N'Creating [dbo].[CourseInstructor]...';


GO
CREATE TABLE [dbo].[CourseInstructor] (
    [CourseID]  INT           NOT NULL,
    [PersonID]  INT           NOT NULL,
    [CreatedBy] NVARCHAR (50) NOT NULL,
    [CreatedOn] DATETIME      NOT NULL,
    [UpdatedBy] NVARCHAR (50) NULL,
    [UpdatedOn] DATETIME      NULL,
    CONSTRAINT [PK_dbo.CourseInstructor] PRIMARY KEY CLUSTERED ([CourseID] ASC, [PersonID] ASC)
);


GO
PRINT N'Creating [dbo].[CourseInstructor].[IX_CourseID]...';


GO
CREATE NONCLUSTERED INDEX [IX_CourseID]
    ON [dbo].[CourseInstructor]([CourseID] ASC);


GO
PRINT N'Creating [dbo].[CourseInstructor].[IX_PersonID]...';


GO
CREATE NONCLUSTERED INDEX [IX_PersonID]
    ON [dbo].[CourseInstructor]([PersonID] ASC);


GO
PRINT N'Creating [dbo].[Department]...';


GO
CREATE TABLE [dbo].[Department] (
    [DepartmentID] INT           IDENTITY (1, 1) NOT NULL,
    [Name]         NVARCHAR (50) NULL,
    [Budget]       MONEY         NOT NULL,
    [StartDate]    DATETIME      NOT NULL,
    [PersonID]     INT           NULL,
    [RowVersion]   ROWVERSION    NOT NULL,
    [CreatedBy]    NVARCHAR (50) NOT NULL,
    [CreatedOn]    DATETIME      NOT NULL,
    [UpdatedBy]    NVARCHAR (50) NULL,
    [UpdatedOn]    DATETIME      NULL,
    CONSTRAINT [PK_dbo.Department] PRIMARY KEY CLUSTERED ([DepartmentID] ASC)
);


GO
PRINT N'Creating [dbo].[Department].[IX_PersonID]...';


GO
CREATE NONCLUSTERED INDEX [IX_PersonID]
    ON [dbo].[Department]([PersonID] ASC);


GO
PRINT N'Creating [dbo].[Enrollment]...';


GO
CREATE TABLE [dbo].[Enrollment] (
    [EnrollmentID] INT           IDENTITY (1, 1) NOT NULL,
    [CourseID]     INT           NOT NULL,
    [PersonID]     INT           NOT NULL,
    [Grade]        INT           NULL,
    [CreatedBy]    NVARCHAR (50) NOT NULL,
    [CreatedOn]    DATETIME      NOT NULL,
    [UpdatedBy]    NVARCHAR (50) NULL,
    [UpdatedOn]    DATETIME      NULL,
    CONSTRAINT [PK_dbo.Enrollment] PRIMARY KEY CLUSTERED ([EnrollmentID] ASC)
);


GO
PRINT N'Creating [dbo].[Enrollment].[IX_CourseID]...';


GO
CREATE NONCLUSTERED INDEX [IX_CourseID]
    ON [dbo].[Enrollment]([CourseID] ASC);


GO
PRINT N'Creating [dbo].[Enrollment].[IX_PersonID]...';


GO
CREATE NONCLUSTERED INDEX [IX_PersonID]
    ON [dbo].[Enrollment]([PersonID] ASC);


GO
PRINT N'Creating [dbo].[OfficeAssignment]...';


GO
CREATE TABLE [dbo].[OfficeAssignment] (
    [PersonID]  INT           NOT NULL,
    [Location]  NVARCHAR (50) NULL,
    [CreatedBy] NVARCHAR (50) NOT NULL,
    [CreatedOn] DATETIME      NOT NULL,
    [UpdatedBy] NVARCHAR (50) NULL,
    [UpdatedOn] DATETIME      NULL,
    CONSTRAINT [PK_dbo.OfficeAssignment] PRIMARY KEY CLUSTERED ([PersonID] ASC)
);


GO
PRINT N'Creating [dbo].[OfficeAssignment].[IX_PersonID]...';


GO
CREATE NONCLUSTERED INDEX [IX_PersonID]
    ON [dbo].[OfficeAssignment]([PersonID] ASC);


GO
PRINT N'Creating [dbo].[Person]...';


GO
CREATE TABLE [dbo].[Person] (
    [PersonID]       INT            IDENTITY (1, 1) NOT NULL,
    [LastName]       NVARCHAR (50)  NULL,
    [FirstName]      NVARCHAR (50)  NULL,
    [HireDate]       DATETIME       NULL,
    [EnrollmentDate] DATETIME       NULL,
    [Discriminator]  NVARCHAR (128) NOT NULL,
    [CreatedBy]      NVARCHAR (50)  NOT NULL,
    [CreatedOn]      DATETIME       NOT NULL,
    [UpdatedBy]      NVARCHAR (50)  NULL,
    [UpdatedOn]      DATETIME       NULL,
    CONSTRAINT [PK_dbo.Person] PRIMARY KEY CLUSTERED ([PersonID] ASC)
);


GO
PRINT N'Creating Default Constraint on [dbo].[Course]....';


GO
ALTER TABLE [dbo].[Course]
    ADD DEFAULT ((1)) FOR [DepartmentID];


GO
PRINT N'Creating FK_dbo.Course_dbo.Department_DepartmentID...';


GO
ALTER TABLE [dbo].[Course]
    ADD CONSTRAINT [FK_dbo.Course_dbo.Department_DepartmentID] FOREIGN KEY ([DepartmentID]) REFERENCES [dbo].[Department] ([DepartmentID]) ON DELETE CASCADE;


GO
PRINT N'Creating FK_dbo.CourseInstructor_dbo.Course_CourseID...';


GO
ALTER TABLE [dbo].[CourseInstructor]
    ADD CONSTRAINT [FK_dbo.CourseInstructor_dbo.Course_CourseID] FOREIGN KEY ([CourseID]) REFERENCES [dbo].[Course] ([CourseID]) ON DELETE CASCADE;


GO
PRINT N'Creating FK_dbo.CourseInstructor_dbo.Person_PersonID...';


GO
ALTER TABLE [dbo].[CourseInstructor]
    ADD CONSTRAINT [FK_dbo.CourseInstructor_dbo.Person_PersonID] FOREIGN KEY ([PersonID]) REFERENCES [dbo].[Person] ([PersonID]) ON DELETE CASCADE;


GO
PRINT N'Creating FK_dbo.Department_dbo.Person_PersonID...';


GO
ALTER TABLE [dbo].[Department]
    ADD CONSTRAINT [FK_dbo.Department_dbo.Person_PersonID] FOREIGN KEY ([PersonID]) REFERENCES [dbo].[Person] ([PersonID]);


GO
PRINT N'Creating FK_dbo.Enrollment_dbo.Course_CourseID...';


GO
ALTER TABLE [dbo].[Enrollment]
    ADD CONSTRAINT [FK_dbo.Enrollment_dbo.Course_CourseID] FOREIGN KEY ([CourseID]) REFERENCES [dbo].[Course] ([CourseID]) ON DELETE CASCADE;


GO
PRINT N'Creating FK_dbo.Enrollment_dbo.Person_PersonID...';


GO
ALTER TABLE [dbo].[Enrollment]
    ADD CONSTRAINT [FK_dbo.Enrollment_dbo.Person_PersonID] FOREIGN KEY ([PersonID]) REFERENCES [dbo].[Person] ([PersonID]) ON DELETE CASCADE;


GO
PRINT N'Creating FK_dbo.OfficeAssignment_dbo.Person_PersonID...';


GO
ALTER TABLE [dbo].[OfficeAssignment]
    ADD CONSTRAINT [FK_dbo.OfficeAssignment_dbo.Person_PersonID] FOREIGN KEY ([PersonID]) REFERENCES [dbo].[Person] ([PersonID]);


GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'c1d5a940-4021-4186-901b-5c043362ea39')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('c1d5a940-4021-4186-901b-5c043362ea39')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
			   SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

/* 
	These are in the opposite order that they are listed in Clean.sql
	The test project should run these in the same order listed here.
	See UnitTests.Helper.
*/

PRINT 'Deleting existing test data.';
-- Clean up order should be first in, last out.

DELETE FROM dbo.Enrollment; DBCC CHECKIDENT('dbo.Enrollment', RESEED, 0);
DELETE FROM dbo.OfficeAssignment;
DELETE FROM dbo.CourseInstructor;
DELETE FROM dbo.Course;
DELETE FROM dbo.Department; DBCC CHECKIDENT('dbo.Department', RESEED, 0);
DELETE FROM dbo.Person; DBCC CHECKIDENT('dbo.Person', RESEED, 0);
DELETE FROM dbo.Audit; DBCC CHECKIDENT('dbo.Audit', RESEED, 0);

PRINT 'Populate test data.';
-- Students
INSERT INTO dbo.Person (LastName, FirstName, EnrollmentDate, Discriminator, CreatedBy, CreatedOn) VALUES ('Alexander', 'Carson', '9/1/2010', 'Student', 'UnitTest', GETDATE()); DECLARE @Person_Alexander INT = @@IDENTITY;
INSERT INTO dbo.Person (LastName, FirstName, EnrollmentDate, Discriminator, CreatedBy, CreatedOn) VALUES ('Alonso', 'Meredith', '9/1/2012', 'Student', 'UnitTest', GETDATE()); DECLARE @Person_Alonso INT = @@IDENTITY;
INSERT INTO dbo.Person (LastName, FirstName, EnrollmentDate, Discriminator, CreatedBy, CreatedOn) VALUES ('Anand', 'Arturo', '9/1/2013', 'Student', 'UnitTest', GETDATE()); DECLARE @Person_Anand INT = @@IDENTITY;
INSERT INTO dbo.Person (LastName, FirstName, EnrollmentDate, Discriminator, CreatedBy, CreatedOn) VALUES ('Barzdukas', 'Gytis', '9/1/2012', 'Student', 'UnitTest', GETDATE()); DECLARE @Person_Barzdukas INT = @@IDENTITY;
INSERT INTO dbo.Person (LastName, FirstName, EnrollmentDate, Discriminator, CreatedBy, CreatedOn) VALUES ('Li', 'Yan', '9/1/2012', 'Student', 'UnitTest', GETDATE()); DECLARE @Person_Li INT = @@IDENTITY;
INSERT INTO dbo.Person (LastName, FirstName, EnrollmentDate, Discriminator, CreatedBy, CreatedOn) VALUES ('Justice', 'Peggy', '9/1/2011', 'Student', 'UnitTest', GETDATE()); DECLARE @Person_Justice INT = @@IDENTITY;
INSERT INTO dbo.Person (LastName, FirstName, EnrollmentDate, Discriminator, CreatedBy, CreatedOn) VALUES ('Norman', 'Laura', '9/1/2013', 'Student', 'UnitTest', GETDATE()); DECLARE @Person_Norman INT = @@IDENTITY;
INSERT INTO dbo.Person (LastName, FirstName, EnrollmentDate, Discriminator, CreatedBy, CreatedOn) VALUES ('Olivetto', 'Nino', '9/1/2005', 'Student', 'UnitTest', GETDATE()); DECLARE @Person_Olivetto INT = @@IDENTITY;

-- Instructors
INSERT INTO dbo.Person (LastName, FirstName, HireDate, Discriminator, CreatedBy, CreatedOn) VALUES ('Abercrombie', 'Kim', '3/11/1995', 'Instructor', 'UnitTest', GETDATE()); DECLARE @Person_Abercrombie INT = @@IDENTITY;
INSERT INTO dbo.Person (LastName, FirstName, HireDate, Discriminator, CreatedBy, CreatedOn) VALUES ('Fakhouri', 'Fadi', '7/6/2002', 'Instructor', 'UnitTest', GETDATE()); DECLARE @Person_Fakhouri INT = @@IDENTITY;
INSERT INTO dbo.Person (LastName, FirstName, HireDate, Discriminator, CreatedBy, CreatedOn) VALUES ('Harui', 'Roger', '7/1/1998', 'Instructor', 'UnitTest', GETDATE()); DECLARE @Person_Harui INT = @@IDENTITY;
INSERT INTO dbo.Person (LastName, FirstName, HireDate, Discriminator, CreatedBy, CreatedOn) VALUES ('Kapoor', 'Candace', '1/15/2001', 'Instructor', 'UnitTest', GETDATE()); DECLARE @Person_Kapoor INT = @@IDENTITY;
INSERT INTO dbo.Person (LastName, FirstName, HireDate, Discriminator, CreatedBy, CreatedOn) VALUES ('Zheng', 'Roger', '2/12/2004', 'Instructor', 'UnitTest', GETDATE()); DECLARE @Person_Zheng INT = @@IDENTITY;

-- Departments
INSERT INTO dbo.Department (Name, Budget, StartDate, PersonID, CreatedBy, CreatedOn) VALUES ('English', 350000, '9/1/2007', @Person_Abercrombie, 'UnitTest', GETDATE()); DECLARE @Department_English INT = @@IDENTITY;
INSERT INTO dbo.Department (Name, Budget, StartDate, PersonID, CreatedBy, CreatedOn) VALUES ('Mathematics', 100000, '9/1/2007', @Person_Fakhouri, 'UnitTest', GETDATE()); DECLARE @Department_Mathematics INT = @@IDENTITY;
INSERT INTO dbo.Department (Name, Budget, StartDate, PersonID, CreatedBy, CreatedOn) VALUES ('Engineering', 350000, '9/1/2007', @Person_Harui, 'UnitTest', GETDATE()); DECLARE @Department_Engineering INT = @@IDENTITY;
INSERT INTO dbo.Department (Name, Budget, StartDate, PersonID, CreatedBy, CreatedOn) VALUES ('Economics', 100000, '9/1/2007', @Person_Kapoor, 'UnitTest', GETDATE()); DECLARE @Department_Economics INT = @@IDENTITY;

-- Courses
DECLARE @Course_Chemistry INT = 1050; INSERT INTO dbo.Course (CourseID, Title, Credits, DepartmentID, CreatedBy, CreatedOn) VALUES (@Course_Chemistry, 'Chemistry', 3, @Department_Engineering, 'UnitTest', GETDATE());
DECLARE @Course_Microeconomics INT = 4022; INSERT INTO dbo.Course (CourseID, Title, Credits, DepartmentID, CreatedBy, CreatedOn) VALUES (@Course_Microeconomics, 'Microeconomics', 3, @Department_Economics, 'UnitTest', GETDATE()); 
DECLARE @Course_Macroeconomics INT = 4041; INSERT INTO dbo.Course (CourseID, Title, Credits, DepartmentID, CreatedBy, CreatedOn) VALUES (@Course_Macroeconomics, 'Macroeconomics', 3, @Department_Economics, 'UnitTest', GETDATE()); 
DECLARE @Course_Calculus INT = 1045; INSERT INTO dbo.Course (CourseID, Title, Credits, DepartmentID, CreatedBy, CreatedOn) VALUES (@Course_Calculus, 'Calculus', 4, @Department_Mathematics, 'UnitTest', GETDATE()); 
DECLARE @Course_Trigonometry INT = 3141; INSERT INTO dbo.Course (CourseID, Title, Credits, DepartmentID, CreatedBy, CreatedOn) VALUES (@Course_Trigonometry, 'Trigonometry', 4, @Department_Mathematics, 'UnitTest', GETDATE()); 
DECLARE @Course_Composition INT = 2021; INSERT INTO dbo.Course (CourseID, Title, Credits, DepartmentID, CreatedBy, CreatedOn) VALUES (@Course_Composition, 'Composition', 3, @Department_English, 'UnitTest', GETDATE()); 
DECLARE @Course_Literature INT = 2042; INSERT INTO dbo.Course (CourseID, Title, Credits, DepartmentID, CreatedBy, CreatedOn) VALUES (@Course_Literature, 'Literature', 4, @Department_English, 'UnitTest', GETDATE()); 

-- Course Instructors
INSERT INTO dbo.CourseInstructor(CourseID, PersonID, CreatedBy, CreatedOn) VALUES (@Course_Composition, @Person_Abercrombie, 'UnitTest', GETDATE());
INSERT INTO dbo.CourseInstructor(CourseID, PersonID, CreatedBy, CreatedOn) VALUES (@Course_Literature, @Person_Abercrombie, 'UnitTest', GETDATE());
INSERT INTO dbo.CourseInstructor(CourseID, PersonID, CreatedBy, CreatedOn) VALUES (@Course_Chemistry, @Person_Harui, 'UnitTest', GETDATE());
INSERT INTO dbo.CourseInstructor(CourseID, PersonID, CreatedBy, CreatedOn) VALUES (@Course_Trigonometry, @Person_Harui, 'UnitTest', GETDATE());
INSERT INTO dbo.CourseInstructor(CourseID, PersonID, CreatedBy, CreatedOn) VALUES (@Course_Chemistry, @Person_Kapoor, 'UnitTest', GETDATE());
INSERT INTO dbo.CourseInstructor(CourseID, PersonID, CreatedBy, CreatedOn) VALUES (@Course_Microeconomics, @Person_Zheng, 'UnitTest', GETDATE());
INSERT INTO dbo.CourseInstructor(CourseID, PersonID, CreatedBy, CreatedOn) VALUES (@Course_Macroeconomics, @Person_Zheng, 'UnitTest', GETDATE());

-- Office Assignment
INSERT INTO dbo.OfficeAssignment (PersonID, Location, CreatedBy, CreatedOn) VALUES (@Person_Fakhouri, 'Smith 17', 'UnitTest', GETDATE());
INSERT INTO dbo.OfficeAssignment (PersonID, Location, CreatedBy, CreatedOn) VALUES (@Person_Harui, 'Gowan 27', 'UnitTest', GETDATE());
INSERT INTO dbo.OfficeAssignment (PersonID, Location, CreatedBy, CreatedOn) VALUES (@Person_Kapoor, 'Thompson 304', 'UnitTest', GETDATE());

-- Enrollments
DECLARE @Enrollment_Grade_A INT = 0;
DECLARE @Enrollment_Grade_B INT = 1;
DECLARE @Enrollment_Grade_C INT = 2;
DECLARE @Enrollment_Grade_D INT = 3;
DECLARE @Enrollment_Grade_F INT = 4;
INSERT INTO dbo.Enrollment (CourseID, PersonID, Grade, CreatedBy, CreatedOn) VALUES (@Course_Chemistry, @Person_Alexander, @Enrollment_Grade_A, 'UnitTest', GETDATE());
INSERT INTO dbo.Enrollment (CourseID, PersonID, Grade, CreatedBy, CreatedOn) VALUES (@Course_Microeconomics, @Person_Alexander, @Enrollment_Grade_C, 'UnitTest', GETDATE());
INSERT INTO dbo.Enrollment (CourseID, PersonID, Grade, CreatedBy, CreatedOn) VALUES (@Course_Macroeconomics, @Person_Alexander, @Enrollment_Grade_B, 'UnitTest', GETDATE());
INSERT INTO dbo.Enrollment (CourseID, PersonID, Grade, CreatedBy, CreatedOn) VALUES (@Course_Trigonometry, @Person_Alonso, @Enrollment_Grade_B, 'UnitTest', GETDATE());
INSERT INTO dbo.Enrollment (CourseID, PersonID, Grade, CreatedBy, CreatedOn) VALUES (@Course_Trigonometry, @Person_Alonso, @Enrollment_Grade_B, 'UnitTest', GETDATE());
INSERT INTO dbo.Enrollment (CourseID, PersonID, Grade, CreatedBy, CreatedOn) VALUES (@Course_Composition, @Person_Alonso, @Enrollment_Grade_B, 'UnitTest', GETDATE());
INSERT INTO dbo.Enrollment (CourseID, PersonID, Grade, CreatedBy, CreatedOn) VALUES (@Course_Chemistry, @Person_Anand, NULL, 'UnitTest', GETDATE());
INSERT INTO dbo.Enrollment (CourseID, PersonID, Grade, CreatedBy, CreatedOn) VALUES (@Course_Microeconomics, @Person_Anand, @Enrollment_Grade_B, 'UnitTest', GETDATE());
INSERT INTO dbo.Enrollment (CourseID, PersonID, Grade, CreatedBy, CreatedOn) VALUES (@Course_Chemistry, @Person_Barzdukas, @Enrollment_Grade_B, 'UnitTest', GETDATE());
INSERT INTO dbo.Enrollment (CourseID, PersonID, Grade, CreatedBy, CreatedOn) VALUES (@Course_Composition, @Person_Li, @Enrollment_Grade_B, 'UnitTest', GETDATE());
INSERT INTO dbo.Enrollment (CourseID, PersonID, Grade, CreatedBy, CreatedOn) VALUES (@Course_Literature, @Person_Justice, @Enrollment_Grade_B, 'UnitTest', GETDATE());

GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
