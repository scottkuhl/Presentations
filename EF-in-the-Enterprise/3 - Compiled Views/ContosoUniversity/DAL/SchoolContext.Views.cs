//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Data.Mapping.EntityViewGenerationAttribute(typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets8F2E89055C080B61BDC9DD528DB3C63A86CEB53BD59376BD49F89A3DD1FD1A9C))]

namespace Edm_EntityMappingGeneratedViews
{
    
    
    /// <Summary>
    /// The type contains views for EntitySets and AssociationSets that were generated at design time.
    /// </Summary>
    public sealed class ViewsForBaseEntitySets8F2E89055C080B61BDC9DD528DB3C63A86CEB53BD59376BD49F89A3DD1FD1A9C : System.Data.Mapping.EntityViewContainer
    {
        
        /// <Summary>
        /// The constructor stores the views for the extents and also the hash values generated based on the metadata and mapping closure and views.
        /// </Summary>
        public ViewsForBaseEntitySets8F2E89055C080B61BDC9DD528DB3C63A86CEB53BD59376BD49F89A3DD1FD1A9C()
        {
            this.EdmEntityContainerName = "SchoolContext";
            this.StoreEntityContainerName = "CodeFirstDatabase";
            this.HashOverMappingClosure = "30b8c4d3bcce645ce20545a8dd168f00f2ee9a681062837284e873f50a65cf6b";
            this.HashOverAllExtentViews = "db7829828d2b0a1e16802037a0bea8530b16f04be2e02d0ae27afb3e197a13c7";
            this.ViewCount = 12;
        }
        
        /// <Summary>
        /// The method returns the view for the index given.
        /// </Summary>
        protected override System.Collections.Generic.KeyValuePair<string, string> GetViewAt(int index)
        {
            if ((index == 0))
            {
                return GetView0();
            }
            if ((index == 1))
            {
                return GetView1();
            }
            if ((index == 2))
            {
                return GetView2();
            }
            if ((index == 3))
            {
                return GetView3();
            }
            if ((index == 4))
            {
                return GetView4();
            }
            if ((index == 5))
            {
                return GetView5();
            }
            if ((index == 6))
            {
                return GetView6();
            }
            if ((index == 7))
            {
                return GetView7();
            }
            if ((index == 8))
            {
                return GetView8();
            }
            if ((index == 9))
            {
                return GetView9();
            }
            if ((index == 10))
            {
                return GetView10();
            }
            if ((index == 11))
            {
                return GetView11();
            }
            throw new System.IndexOutOfRangeException();
        }
        
        /// <Summary>
        /// return view for CodeFirstDatabase.Course
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView0()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CodeFirstDatabase.Course", @"
    SELECT VALUE -- Constructing Course
        [CodeFirstDatabaseSchema.Course](T1.Course_CourseID, T1.Course_Title, T1.Course_Credits, T1.Course_DepartmentID)
    FROM (
        SELECT 
            T.CourseID AS Course_CourseID, 
            T.Title AS Course_Title, 
            T.Credits AS Course_Credits, 
            T.DepartmentID AS Course_DepartmentID, 
            True AS _from0
        FROM SchoolContext.Courses AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CodeFirstDatabase.Department
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView1()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CodeFirstDatabase.Department", @"
    SELECT VALUE -- Constructing Department
        [CodeFirstDatabaseSchema.Department](T1.Department_DepartmentID, T1.Department_Name, T1.Department_Budget, T1.Department_StartDate, T1.Department_PersonID, T1.Department_RowVersion)
    FROM (
        SELECT 
            T.DepartmentID AS Department_DepartmentID, 
            T.Name AS Department_Name, 
            T.Budget AS Department_Budget, 
            T.StartDate AS Department_StartDate, 
            T.PersonID AS Department_PersonID, 
            T.RowVersion AS Department_RowVersion, 
            True AS _from0
        FROM SchoolContext.Departments AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CodeFirstDatabase.Person
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView2()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CodeFirstDatabase.Person", @"
    SELECT VALUE -- Constructing Person
        [CodeFirstDatabaseSchema.Person](T2.Person_PersonID, T2.Person_LastName, T2.Person_FirstName, T2.Person_HireDate, T2.Person_EnrollmentDate, T2.Person_Discriminator)
    FROM (
        SELECT -- Constructing Discriminator
            T1.Person_PersonID, 
            T1.Person_LastName, 
            T1.Person_FirstName, 
            T1.Person_HireDate, 
            T1.Person_EnrollmentDate, 
            CASE
                WHEN T1._from0 THEN N'Instructor'
                ELSE N'Student'
            END AS Person_Discriminator
        FROM (
            SELECT 
                T.PersonID AS Person_PersonID, 
                T.LastName AS Person_LastName, 
                T.FirstMidName AS Person_FirstName, 
                TREAT(T AS [ContosoUniversity.DAL.Instructor]).HireDate AS Person_HireDate, 
                TREAT(T AS [ContosoUniversity.DAL.Student]).EnrollmentDate AS Person_EnrollmentDate, 
                CASE WHEN T IS OF (ONLY [ContosoUniversity.DAL.Instructor]) THEN True ELSE False END AS _from0, 
                CASE WHEN T IS OF (ONLY [ContosoUniversity.DAL.Student]) THEN True ELSE False END AS _from1, 
                True AS _from2
            FROM SchoolContext.People AS T
        ) AS T1
    ) AS T2");
        }
        
        /// <Summary>
        /// return view for CodeFirstDatabase.OfficeAssignment
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView3()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CodeFirstDatabase.OfficeAssignment", @"
    SELECT VALUE -- Constructing OfficeAssignment
        [CodeFirstDatabaseSchema.OfficeAssignment](T1.OfficeAssignment_PersonID, T1.OfficeAssignment_Location)
    FROM (
        SELECT 
            T.PersonID AS OfficeAssignment_PersonID, 
            T.Location AS OfficeAssignment_Location, 
            True AS _from0
        FROM SchoolContext.OfficeAssignments AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CodeFirstDatabase.Enrollment
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView4()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CodeFirstDatabase.Enrollment", @"
    SELECT VALUE -- Constructing Enrollment
        [CodeFirstDatabaseSchema.Enrollment](T1.Enrollment_EnrollmentID, T1.Enrollment_CourseID, T1.Enrollment_PersonID, T1.Enrollment_Grade)
    FROM (
        SELECT 
            T.EnrollmentID AS Enrollment_EnrollmentID, 
            T.CourseID AS Enrollment_CourseID, 
            T.PersonID AS Enrollment_PersonID, 
            CAST(T.Grade AS [Edm.Int32]) AS Enrollment_Grade, 
            True AS _from0
        FROM SchoolContext.Enrollments AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for CodeFirstDatabase.CourseInstructor
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView5()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("CodeFirstDatabase.CourseInstructor", @"
    SELECT VALUE -- Constructing CourseInstructor
        [CodeFirstDatabaseSchema.CourseInstructor](T1.CourseInstructor_CourseID, T1.CourseInstructor_PersonID)
    FROM (
        SELECT 
            Key(T.Course_Instructors_Source).CourseID AS CourseInstructor_CourseID, 
            Key(T.Course_Instructors_Target).PersonID AS CourseInstructor_PersonID, 
            True AS _from0
        FROM SchoolContext.Course_Instructors AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for SchoolContext.Courses
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView6()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("SchoolContext.Courses", @"
    SELECT VALUE -- Constructing Courses
        [ContosoUniversity.DAL.Course](T1.Course_CourseID, T1.Course_Title, T1.Course_Credits, T1.Course_DepartmentID)
    FROM (
        SELECT 
            T.CourseID AS Course_CourseID, 
            T.Title AS Course_Title, 
            T.Credits AS Course_Credits, 
            T.DepartmentID AS Course_DepartmentID, 
            True AS _from0
        FROM CodeFirstDatabase.Course AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for SchoolContext.Departments
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView7()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("SchoolContext.Departments", @"
    SELECT VALUE -- Constructing Departments
        [ContosoUniversity.DAL.Department](T1.Department_DepartmentID, T1.Department_Name, T1.Department_Budget, T1.Department_StartDate, T1.Department_PersonID, T1.Department_RowVersion)
    FROM (
        SELECT 
            T.DepartmentID AS Department_DepartmentID, 
            T.Name AS Department_Name, 
            T.Budget AS Department_Budget, 
            T.StartDate AS Department_StartDate, 
            T.PersonID AS Department_PersonID, 
            T.RowVersion AS Department_RowVersion, 
            True AS _from0
        FROM CodeFirstDatabase.Department AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for SchoolContext.People
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView8()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("SchoolContext.People", @"
    SELECT VALUE -- Constructing People
        CASE
            WHEN T1._from1 THEN [ContosoUniversity.DAL.Instructor](T1.Person_PersonID, T1.Person_LastName, T1.Person_FirstMidName, T1.Instructor_HireDate)
            ELSE [ContosoUniversity.DAL.Student](T1.Person_PersonID, T1.Person_LastName, T1.Person_FirstMidName, T1.Student_EnrollmentDate)
        END
    FROM (
        SELECT 
            T.PersonID AS Person_PersonID, 
            T.LastName AS Person_LastName, 
            T.FirstName AS Person_FirstMidName, 
            T.HireDate AS Instructor_HireDate, 
            T.EnrollmentDate AS Student_EnrollmentDate, 
            True AS _from0, 
            CASE WHEN T.Discriminator = N'Instructor' THEN True ELSE False END AS _from1, 
            CASE WHEN T.Discriminator = N'Student' THEN True ELSE False END AS _from2
        FROM CodeFirstDatabase.Person AS T
        WHERE T.Discriminator IN {N'Instructor', N'Student'}
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for SchoolContext.OfficeAssignments
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView9()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("SchoolContext.OfficeAssignments", @"
    SELECT VALUE -- Constructing OfficeAssignments
        [ContosoUniversity.DAL.OfficeAssignment](T1.OfficeAssignment_PersonID, T1.OfficeAssignment_Location)
    FROM (
        SELECT 
            T.PersonID AS OfficeAssignment_PersonID, 
            T.Location AS OfficeAssignment_Location, 
            True AS _from0
        FROM CodeFirstDatabase.OfficeAssignment AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for SchoolContext.Enrollments
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView10()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("SchoolContext.Enrollments", @"
    SELECT VALUE -- Constructing Enrollments
        [ContosoUniversity.DAL.Enrollment](T1.Enrollment_EnrollmentID, T1.Enrollment_CourseID, T1.Enrollment_PersonID, T1.Enrollment_Grade)
    FROM (
        SELECT 
            T.EnrollmentID AS Enrollment_EnrollmentID, 
            T.CourseID AS Enrollment_CourseID, 
            T.PersonID AS Enrollment_PersonID, 
            CAST(T.Grade AS [ContosoUniversity.DAL.Grade]) AS Enrollment_Grade, 
            True AS _from0
        FROM CodeFirstDatabase.Enrollment AS T
    ) AS T1");
        }
        
        /// <Summary>
        /// return view for SchoolContext.Course_Instructors
        /// </Summary>
        private System.Collections.Generic.KeyValuePair<string, string> GetView11()
        {
            return new System.Collections.Generic.KeyValuePair<string, string>("SchoolContext.Course_Instructors", @"
    SELECT VALUE -- Constructing Course_Instructors
        [ContosoUniversity.DAL.Course_Instructors](T3.[Course_Instructors.Course_Instructors_Source], T3.[Course_Instructors.Course_Instructors_Target])
    FROM (
        SELECT -- Constructing Course_Instructors_Source
            CreateRef(SchoolContext.Courses, row(T2.[Course_Instructors.Course_Instructors_Source.CourseID]), [ContosoUniversity.DAL.Course]) AS [Course_Instructors.Course_Instructors_Source], 
            T2.[Course_Instructors.Course_Instructors_Target]
        FROM (
            SELECT -- Constructing Course_Instructors_Target
                T1.[Course_Instructors.Course_Instructors_Source.CourseID], 
                CreateRef(SchoolContext.People, row(T1.[Course_Instructors.Course_Instructors_Target.PersonID]), [ContosoUniversity.DAL.Instructor]) AS [Course_Instructors.Course_Instructors_Target]
            FROM (
                SELECT 
                    T.CourseID AS [Course_Instructors.Course_Instructors_Source.CourseID], 
                    T.PersonID AS [Course_Instructors.Course_Instructors_Target.PersonID], 
                    True AS _from0
                FROM CodeFirstDatabase.CourseInstructor AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }
    }
}
